package edu.wmich.cs3310.hw4Kirkland;

import java.util.HashMap;
import java.util.Map;

public class Huffman {
	PriorityQueue pq = new PriorityQueue();
	Map<Character, String> encodeKey = new HashMap<Character, String>();
	Map<String, Character> decodeKey = new HashMap<String,Character >();
	HuffmanNode tree;
	
	public Huffman(PriorityQueue pqt) {
		pq = pqt;
		tree = createTree();
		//printTree(tree, "");
		//System.out.println("BRO");
		makeKeys(tree, "");
		//System.out.println("BRO2");
	}
	
	public HuffmanNode createTree() {
		HuffmanNode root = null; 
		
		while(pq.size()>1) {
			HuffmanNode first = pq.dequeue();
			HuffmanNode second = pq.dequeue();
			HuffmanNode f = new HuffmanNode(); 
			f.setFreq(first.getFreq()+second.getFreq());
			f.setChar('\n');
			f.setLeft(first);
			f.setRight(second);
			root = f;
			pq.enqueue(f);
		}
		return root;
	}
	
	public void printTree(HuffmanNode root, String s) {
		
	  
	        // base case; if the left and right are null 
	        // then its a leaf node and we print 
	        // the code s generated by traversing the tree. 
	        if (root.getLeft() == null && root.getRight() == null && root.getChar()!='\n') { 
	  
	            // c is the character in the node 
	            System.out.println(root.getChar() + ":" + s); 
	  
	            return; 
	        } 
	  
	        // if we go to left then add "0" to the code. 
	        // if we go to the right add"1" to the code. 
	  
	        // recursive calls for left and 
	        // right sub-tree of the generated tree. 
	        printTree(root.getLeft(), s + "0"); 
	        printTree(root.getRight(), s + "1"); 
	     
	}
	
	public void makeKeys(HuffmanNode root, String s) {
		if (root.getLeft() == null && root.getRight() == null && root.getChar()!='\n') { 
			
            // c is the character in the node 
			encodeKey.put(root.getChar(), s);
			decodeKey.put(s, root.getChar());
            //System.out.println(root.getChar() + ":" + s); 
  
            return; 
        } 
		makeKeys(root.getLeft(), s + "0"); 
		makeKeys(root.getRight(), s + "1"); 
	}
	
	public Map<Character, String> getEncodeKey() {
		return encodeKey;
	}
	
	public Map<String, Character> getDecodeKey() {
		return decodeKey;
	}
}
